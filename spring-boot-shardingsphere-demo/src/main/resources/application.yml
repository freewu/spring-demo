# 服务端口
server:
  port: 8082

# 调试模式
debug: true

# 服务名
spring:
  # 定义两个全局数据源
  shardingsphere:
    mode:
      type: Memory
    datasource:
      enabled: true
      names: ds0,ds1
      ds0:
        type: com.zaxxer.hikari.HikariDataSource
        driverClassName: com.mysql.cj.jdbc.Driver
        jdbc-url: jdbc:mysql://192.168.5.132:3306/ds0?useUnicode=true&characterEncoding=utf8&tinyInt1isBit=false&useSSL=false&serverTimezone=GMT
        username: root
        password: 123456
      # 配置数据源 ds1
      ds1:
        type: com.zaxxer.hikari.HikariDataSource
        driverClassName: com.mysql.cj.jdbc.Driver
        jdbc-url: jdbc:mysql://192.168.5.132:3306/ds1?useUnicode=true&characterEncoding=utf8&tinyInt1isBit=false&useSSL=false&serverTimezone=GMT
        username: root
        password: 123456
    sharding:
      tables:
        t_user:
          actual-data-nodes: ds$->{0..1}.t_user_$->{0..2}
          ### 分库策略
          database-strategy:
            inline:
              # 分库分片键
              sharding-column: userId
              # 分库分片算法
              algorithm-expression: ds$->{userId % 2}
          # 分表策略
          table-strategy:
            inline:
              # 分表分片健
              sharding-column: userId
              # 分表算法
              algorithm-expression: t_user_$->{userId % 3}

          key-generator:
            # 自增主键字段
            column: userId
            # 自增主键ID 生成方案
            type: SNOWFLAKE
        t_blog:
          actual-data-nodes: ds$->{0..1}.t_blog_$->{0..2}
          ### 分库策略
          database-strategy:
            inline:
              # 分库分片键
              sharding-column: userId
              # 分库分片算法
              algorithm-expression: ds$->{userId % 2}
          # 分表策略
          table-strategy:
            inline:
              # 分表分片健
              sharding-column: userId
              # 分表算法
              algorithm-expression: t_blog_$->{userId % 3}

          key-generator:
            # 自增主键字段
            column: id
            # 自增主键ID 生成方案
            type: SNOWFLAKE

      # 绑定表关系 指分片规则一致的主表和子表
      binding-tables: t_user, t_blog #,t_order_item
      # 广播表 指所有的分片数据源中都存在的表，表结构和表中的数据在每个数据库中均完全一致
      broadcast-tables: t_config
    # 是否开启 SQL解析日志
    props:
      sql:
        show: true

  main:
    allow-bean-definition-overriding: true

# 配置 xml 的扫描路径
mybatis:
  mapper-locations: classpath:mapper/*.xml
